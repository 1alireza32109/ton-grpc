syntax = "proto3";

package ton;

service TvmEmulator {
  rpc Process(stream TvmEmulatorRequest) returns (stream TvmEmulatorResponse);
}

message TvmEmulatorRequest {
  uint64 request_id = 1;
  oneof Request {
    TvmEmulatorPrepareRequest prepare = 2;
    TvmEmulatorRunGetMethodRequest run_get_method = 3;
    TvmEmulatorSendExternalMessageRequest send_external_message = 4;
    TvmEmulatorSendInternalMessageRequest send_internal_message = 5;
    TvmEmulatorSetLibrariesRequest set_libraries = 6;
    TvmEmulatorSetGasLimitRequest set_gas_limit = 7;
    TvmEmulatorSetC7Request set_c7 = 8;
  }
}

message TvmEmulatorResponse {
  uint64 request_id = 1;
  oneof Response {
    TvmEmulatorPrepareResponse prepare_response = 2;
    TvmEmulatorRunGetMethodResponse run_get_method_response = 3;
    TvmEmulatorSendExternalMessageResponse send_external_message_response = 4;
    TvmEmulatorSendInternalMessageResponse send_internal_message_response = 5;
    TvmEmulatorSetLibrariesResponse set_libraries_response = 6;
    TvmEmulatorSetGasLimitResponse set_gas_limit_response = 7;
    TvmEmulatorSetC7Response set_c7_response = 8;
  }
}

message TvmEmulatorPrepareRequest {
  int32 vm_log_verbosity = 1;
  string code_boc = 2;
  string data_boc = 3;
}

message TvmEmulatorPrepareResponse {
  bool success = 1;
}

message TvmEmulatorRunGetMethodRequest {
  int32 method_id = 1;
  string stack_boc = 2;
}

message TvmEmulatorRunGetMethodResponse {
  int32 vm_exit_code = 1;
  string gas_used = 2;
  string vm_log = 3;
  string stack = 4;
  optional string missing_library = 5;
}

message TvmEmulatorSendExternalMessageRequest {
  string message_body_boc = 1;
}

message TvmEmulatorSendExternalMessageResponse {
  int32 vm_exit_code = 1;
  bool accepted = 2;
  string gas_used = 3;
  string vm_log = 4;
  string new_code = 5;
  string new_data = 6;
  optional string missing_library = 7;
  optional string actions = 8;
}

message TvmEmulatorSendInternalMessageRequest {
  uint64 amount = 1;
  string message_body_boc = 2;
}

message TvmEmulatorSendInternalMessageResponse {
  int32 vm_exit_code = 1;
  bool accepted = 2;
  string gas_used = 3;
  string vm_log = 4;
  string new_code = 5;
  string new_data = 6;
  optional string missing_library = 7;
  optional string actions = 8;
}

message TvmEmulatorSetLibrariesRequest {
  string libs_boc = 1;
}

message TvmEmulatorSetLibrariesResponse {
  bool success = 1;
}

message TvmEmulatorSetGasLimitRequest {
  int64 gas_limit = 1;
}

message TvmEmulatorSetGasLimitResponse {
  bool success = 1;
}

message TvmEmulatorSetC7Request {
  uint32 unixtime = 1;
  uint64 balance = 2;
  string address = 3;
  string rand_seed_hex = 4;
  string config = 5;
}

message TvmEmulatorSetC7Response {
  bool success = 1;
}

service TransactionEmulator {
  rpc Process(stream TransactionEmulatorRequest) returns (stream TransactionEmulatorResponse);
}

message TransactionEmulatorRequest {
  uint64 request_id = 1;
  oneof Request {
    TransactionEmulatorPrepareRequest prepare = 2;
    TransactionEmulatorEmulateRequest emulate = 3;
    TransactionEmulatorSetUnixtimeRequest set_unixtime = 4;
    TransactionEmulatorSetLtRequest set_lt = 5;
    TransactionEmulatorSetRandSeedRequest set_rand_seed = 6;
    TransactionEmulatorSetIgnoreChksigRequest set_ignore_chksig = 7;
    TransactionEmulatorSetConfigRequest set_config = 8;
    TransactionEmulatorSetLibsRequest set_libs = 9;

  }
}

message TransactionEmulatorResponse {
  uint64 request_id = 1;
  oneof Response {
    TransactionEmulatorPrepareResponse prepare_response = 2;
    TransactionEmulatorEmulateResponse emulate_response = 3;
    TransactionEmulatorSetUnixtimeResponse set_unixtime_response = 4;
    TransactionEmulatorSetLtResponse set_lt_response = 5;
    TransactionEmulatorSetRandSeedResponse set_rand_seed_response = 6;
    TransactionEmulatorSetIgnoreChksigResponse set_ignore_chksig_response = 7;
    TransactionEmulatorSetConfigResponse set_config_response = 8;
    TransactionEmulatorSetLibsResponse set_libs_response = 9;
  }
}

message TransactionEmulatorPrepareRequest {
  int32 vm_log_level = 1;
  string config_boc = 2;
}

message TransactionEmulatorPrepareResponse {
  bool success = 1;
}

message TransactionEmulatorEmulateRequest {
  string shard_account_boc = 1;
  string message_boc = 2;
}

message TransactionEmulatorEmulateResponse {
  string transaction = 1;
  string shard_account = 2;
  string vm_log = 3;
  optional string actions = 4;
}

message TransactionEmulatorSetUnixtimeRequest {
  uint32 unixtime = 1;
}

message TransactionEmulatorSetUnixtimeResponse {
  bool success = 1;
}

message TransactionEmulatorSetLtRequest {
  uint64 lt = 1;
}

message TransactionEmulatorSetLtResponse {
  bool success = 1;
}

message TransactionEmulatorSetRandSeedRequest {
  string rand_seed = 1;
}

message TransactionEmulatorSetRandSeedResponse {
  bool success = 1;
}

message TransactionEmulatorSetIgnoreChksigRequest {
  bool ignore_chksig = 1;
}

message TransactionEmulatorSetIgnoreChksigResponse {
  bool success = 1;
}

message TransactionEmulatorSetConfigRequest {
  string config = 1;
}

message TransactionEmulatorSetConfigResponse {
  bool success = 1;
}

message TransactionEmulatorSetLibsRequest {
  string libs = 1;
}

message TransactionEmulatorSetLibsResponse {
  bool success = 1;
}


service Account {
  rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse);
  rpc GetShardAccountCell (GetShardAccountCellRequest) returns (GetShardAccountCellResponse);
  rpc GetAccountTransactions (GetAccountTransactionsRequest) returns (stream Transaction);
}

message GetAccountStateRequest {
  string account_address = 1;

  /* optional */ oneof criteria {
    BlockId block_id = 2;
    PartialTransactionId transaction_id = 3;
  }
}

message GetAccountStateResponse {
  string account_address = 1;
  BlockIdExt block_id = 2;
  int64 balance = 3;
  optional TransactionId last_transaction_id = 4;
  oneof account_state {
    ActiveAccountState active = 5;
    FrozenAccountState frozen = 6;
    UninitializedAccountState uninitialized = 7;
  }
}

message GetShardAccountCellRequest {
  string account_address = 1;
  /* optional */ oneof criteria {
    BlockId block_id = 2;
    PartialTransactionId transaction_id = 3;
  }
}

message GetShardAccountCellResponse {
  string account_address = 1;
  BlockIdExt block_id = 2;
  TvmCell cell = 3;
}

message GetAccountTransactionsRequest {
  message Bound {
    enum Type {
      INCLUDED = 0;
      EXCLUDED = 1;
    }
    Type type = 1;

    oneof bound {
      BlockId block_id = 2;
      PartialTransactionId transaction_id = 3;
    }
  }

  enum Order {
    UNORDERED = 0; // default
    FROM_NEW_TO_OLD = 1;
//    FROM_OLD_TO_NEW = 2;
  }

  string account_address = 1;
  Order order = 2;

  optional Bound from = 3;
  optional Bound to = 4;
}

message BlockId {
  int32 workchain = 1;
  int64 shard = 2;
  int32 seqno = 3;
  optional string root_hash = 4;
  optional string file_hash = 5;
}

message BlockIdExt {
  int32 workchain = 1;
  int64 shard = 2;
  int32 seqno = 3;
  string root_hash = 4;
  string file_hash = 5;
}

message TransactionId {
  string account_address = 1;
  string hash = 2;
  int64 lt = 3;
}

message PartialTransactionId {
  string hash = 1;
  int64 lt = 2;
}

message MessageDataRaw {
  string body = 1;
  string init_state = 2;
}

message MessageDataText {
  string text = 1;
}

message MessageDataDecryptedText {
  string text = 1;
}

message MessageDataEncryptedText {
  string text = 1;
}

message Message {
  optional string source = 1;
  optional string destination = 2;
  int64 value = 3;
  int64 fwd_fee = 4;
  int64 ihr_fee = 5;
  int64 created_lt = 6;
  string body_hash = 7;
  oneof msg_data {
      MessageDataRaw raw = 8;
      MessageDataText text = 9;
      MessageDataDecryptedText decrypted_text = 10;
      MessageDataEncryptedText encrypted_text = 11;
  }
}

message Transaction {
  TransactionId id = 1;
  int64 utime = 2;
  string data = 3;
  int64 fee = 4;
  int64 storage_fee = 5;
  int64 other_fee = 6;
  optional Message in_msg = 7;
  repeated Message out_msgs = 8;
}

message ActiveAccountState {
  string code = 2;
  string data = 3;
}

message FrozenAccountState {
  string frozen_hash = 2;
}

message UninitializedAccountState {
}

message TvmCell {
  string bytes = 1;
}

service Block {
  rpc SubscribeLastBlock (SubscribeLastBlockRequest) returns (stream SubscribeLastBlockEvent);
  rpc GetLastBlock (GetLastBlockRequest) returns (BlockIdExt);
  rpc GetBlock (BlockId) returns (BlockIdExt);
  rpc GetShards (BlockId) returns (GetShardsResponse);
  rpc GetBlockTransactionIds (GetBlockTransactionIdsRequest) returns (stream TransactionId);
  rpc GetAccountAddresses (BlockId) returns (stream AccountAddress);
}

message SubscribeLastBlockRequest {}

message SubscribeLastBlockEvent {
  BlockIdExt masterchain = 1;
  BlockIdExt workchain = 2;
}

message GetLastBlockRequest {}

message GetShardsResponse {
  repeated BlockIdExt shards = 1;
}

message GetBlockTransactionIdsRequest {
  enum Order {
    UNORDERED = 0;
    ASC = 1;
    DESC = 2;
  }

  BlockId block_id = 1;
  Order order = 2;
}

message AccountAddress {
  string address = 1;
}
